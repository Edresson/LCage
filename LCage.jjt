PARSER_BEGIN(LCage)
import java.io.*;
public class LCage {

public static void main(String args[]) throws ParseException,IOException {
    try{
        
		LCage parser = new LCage(new FileInputStream(args[0]));
        SimpleNode n = parser.LCage();
        n.dump("");

	}
	catch (Exception e) 
	{
		System.out.println( "Analise Sintaxica NOT OK");
		System.out.println("Erro de Token.");
		System.out.println(e.getMessage());
		e.printStackTrace(); 
	}
	catch (Error e)
	{
		System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
	}


    

  }
}

PARSER_END(LCage)


TOKEN_MGR_DECLS:
{
static int countLexError = 0;
int countParserError = 0;
public int foundLexError()
{
   return countLexError;
}
public int foundParserError()
{
   return countParserError;
}
}


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <COMENTARIO: "//" (<COM>)* >
| <COMENTARIOS: "/*" ("\n" | "\r" | <COM>)* "*/" >
| <#COM: ( ~["\"","\\","\n","\r","\""] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n") ) | "\"" )*>
}

TOKEN :
{
  <      MAIN: 	"main"		>
| <	  ACHAVES: 	"{"			>
| <	  FCHAVES: 	"}"			>
| <	  APARENT: 	"("			>
| <	  FPARENT: 	")"			>
| <	      VAR: 	"cage"		>
| <PTOVIRGULA: 	";"			>
| <		   IF: 	"cageif"	>
| <		 ELSE: 	"elcages"	>
| <		WHILE: 	"ncage"		>	
| <		   DO: 	"docage"	>
| <    RETURN: 	"recage"	>
| <     PRINT: 	"pricage"	>
| <    FUNCAO:  "funCage"	>
| <		  INT:  "icage"		>
| <     FLOAT: 	"fcage"		>
| <      BOOL:  "bcage"		>
| <		 TRUE: 	"trucage"	>
| <		FALSE: 	"falcage"	>
| <	  VIRGULA: 	","			>
| <		ATRIB: 	":="		>
}

TOKEN :
{
 <			 OP: ("+" | "-" | "*" | "/" )					>
|<		    OPL: ( "<" | ">" | "=="| "<="| ">=" |"!")		>
|<		 #LETRA: ["a"-"z","A"-"Z"]							> 
|<	    #DIGITO: ["0"-"9"]									>
|<	   #DIGITOS: <DIGITO> (<DIGITO>)*						>
|<		    #LD: <LETRA> | <DIGITO>							>
|<		  #FSUB: ("_"(<LD>)+)								>
|<		   #FOP: ("."<DIGITOS>)?							>
|<		 #EXPOP: ("E"("+" | "-")?<DIGITOS>)?				>
|<IDENTIFICADOR: <LETRA>(<LD>)*(<FSUB>)*					>
|< TOKEN_NUMLIT: <DIGITOS><FOP><EXPOP>						>
}



// TRATANDO OS ERROS LEXICOS ENCONTRADOS
SPECIAL_TOKEN : {
 <ID_INVALIDO: ("@" | "!" | "#" | "*" | "-" | "+" "=" | "&" | <DIGITO>)(<LETRA>|<DIGITO> | "_" | "@")*>{
                                     System.out.println("IDENTIFICADOR: "+image);
                                     countLexError++;
                                     System.out.println("\u005cn\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image +"\u005cn");
                                     }
|
<INVALIDO_LEXICO: 
(~["a"-"z",
"A"-"Z",
"0"-"9","\"","(",")","[","]","{","}",";",",",".","=",">","<","!","+","-","*","/","%"," ","_",";","\t","\n","\r","\f"
])+>{System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado: " + image + "TOTAL ERRO "+countLexError);
                          countLexError++;
                          System.out.println("\u005cn\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image +"\u005cn");
                          }
|
<INVALID_CONST:
"\"" (~["\n","\r","\""])*["\n","\r"]>{System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado \\n: " + image+" Era esperado uma aspa");
                                     countLexError++;
                                     System.out.println("Erro Lexico --------> "+image);
                                     System.out.println("\u005cn\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image+"\u005cn");
                                     }
| <INVALID_CONSTANTE_CHAR: "\'" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\""] | ( ["\n","\r"] | "\r\n")))* "\'">{
                                     System.out.println("Erro lexico: --------> "+image);
                                     System.out.println("\u005cn\u005cnErro lexico: --------> "+image);
                                     }

}




SimpleNode LCage () :
{}
{ 

	Main() 
	(Func())*
	<EOF> 
{return jjtThis;}
}
	
// Define a função main do programa
void Main ():
{}
{
 <MAIN> <ACHAVES> 
 
 VarDecl()
 SeqComandos()

 <FCHAVES>

}

//Declarações de variaveis
void VarDecl ():
{}
{
	(<VAR> Tipo() <IDENTIFICADOR> Atribuicao())* 
}

void Tipo ():
{}
{
	<INT> | <BOOL> | <FLOAT>
}

// Deriva em atribuir ou adiciona ponto e virgula
void Atribuicao():
{}
{
	 Atribuir()
	 | <PTOVIRGULA>  
}

// Atribui  uma expressão a uma variavel, uma expressão  (( 1+1 )), ou deriva em Mdeclaracao permitindo  multiplas declarações
void Atribuir ():
{}
{
	<ATRIB> Exp() Loop()  | <APARENT> ( ListaExp() )? <FPARENT> <PTOVIRGULA> | Mdeclaracao() 
}

// Adiciona virgula a atribuicao permitindo multipla declaração do tipo: var fcage a,b,c;
void Mdeclaracao():
{}
{
 <VIRGULA> <IDENTIFICADOR> Atribuicao()
}

// adiciona mais uma atribuicao na mesma linha ex: var icage a:=1,b:=2;
void Loop():
{}
{
	 Mdeclaracao() | <PTOVIRGULA>
}	


// uma expressão matematica entre parenteses ou deriva em Fator
void Exp():
{}
{
	<APARENT> Exp() <OP> Exp() <FPARENT> | Fator()
}

// gera uma chamada de função ou  um numero ou  true ou false
void Fator():
{}
{
	<IDENTIFICADOR> ( <APARENT> ( ListaExp() )? <FPARENT> )? | <TOKEN_NUMLIT> | <TRUE> | <FALSE>
}
// uma Exp e derivando em ListaExp2 
void ListaExp():
{}
{
	Exp() ListaExp2()
}

// permite usar virgula nos parametros das funcoes nas declaração exp: cage fcage b := func(a,b)
void ListaExp2():
{}
{
	(<VIRGULA> Exp() ListaExp2())?
}


// após as declarações de variaveis usa-se essa função para criar os loops,condicionais entre outros.
void SeqComandos ():
{}
{
	(Comando())*
}
// pode-se atribuir um valor a uma variavel  ex: a := (1 + 1);
//declarar estrutura condicional, comando de repeticao do tipo NCAGE, e do tipo DOCAGE
// Retornar valor , e usar a função de mostrar na tela (PRINT)
void Comando ():
{}
{
	<IDENTIFICADOR> Atribuir() 
						| <IF> <APARENT> Exp_logicas() <FPARENT> 
							<ACHAVES> 
								SeqComandos() 
							<FCHAVES> <PTOVIRGULA>

						| <IF> <APARENT> Exp_logicas() <FPARENT> 
							<ACHAVES> 
								SeqComandos() 
							<FCHAVES><ELSE>
							<ACHAVES>
								Ifelse()
							<FCHAVES><PTOVIRGULA> 

						| <WHILE> <APARENT> Exp_logicas() <FPARENT> 
						<ACHAVES> 
							SeqComandos() 
						<FCHAVES> <PTOVIRGULA>

						| <DO> <ACHAVES> 
							SeqComandos() 
						<FCHAVES> <WHILE> <APARENT> Exp_logicas() <FPARENT> <PTOVIRGULA>
                                               
						| <RETURN> Exp() <PTOVIRGULA>

						| <PRINT> <APARENT> Exp() <FPARENT> <PTOVIRGULA>

}
//função recursiva para auxiliar a chamada de vários if else                                                       
void Ifelse():
{}{
	|<IF> <APARENT> Exp_logicas() <FPARENT> 
	<ACHAVES> 
		SeqComandos() 
	<FCHAVES> <ELSE>
	<ACHAVES>
		Ifelse()
	<FCHAVES>

	| SeqComandos()
}


//  uma expressão logica entre parenteses ou deriva em Fator_logico
void Exp_logicas():
{}
{
	<APARENT> Exp_logicas() <OPL> Exp_logicas() <FPARENT> | Fator_logico()
}

// gera um identificador  ou  um numero ou  true ou false

void Fator_logico():
{}
{
	<IDENTIFICADOR> | <TOKEN_NUMLIT> | <TRUE> | <FALSE>
}



//declara funções
void Func():
{}
{
	<FUNCAO> Tipo() <IDENTIFICADOR> <APARENT> ( ListaArg() )? <FPARENT> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>
}

//lista de argumentos da função, permitindo declarações mas não um valor default para o parametro
void ListaArg():
{}
{
	Tipo() <IDENTIFICADOR> ListaArg2()
}

// adiciona virgula para os argumentos da função
void ListaArg2():
{}
{
	(<VIRGULA> Tipo() <IDENTIFICADOR> ListaArg2())?
}